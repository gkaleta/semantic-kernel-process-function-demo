using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.Orchestration;
using Microsoft.SemanticKernel.Connectors.AI.OpenAI;
using System.IO;

class Program
{
    static async Task Main(string[] args)
    {
        // 1. Kernel Setup
        var builder = Kernel.CreateBuilder();
        builder.AddAzureOpenAIChatCompletion(
            deploymentName: "YOUR_DEPLOYMENT_NAME",
            endpoint: "https://YOUR_RESOURCE_NAME.openai.azure.com/",
            apiKey: "YOUR_API_KEY"
        );
        var kernel = builder.Build();

        // 2. Input Stage: User provides a base description
        Console.WriteLine("Enter a base clothing description:");
        string baseDescription = Console.ReadLine();

        // 3. Read folders (TShirt, Sweater, Jeans)
        string[] categories = { "TShirt", "Sweater", "Jeans" };
        foreach (var category in categories)
        {
            Console.WriteLine($"\nCategory: {category}");
            // Optionally, read files/images in the folder for more context

            // 4. Multi-Agent Group Chat
            var responses = await RunGroupChat(kernel, baseDescription, category);
            foreach (var response in responses)
            {
                Console.WriteLine(response);
            }
        }
    }

    static async Task<List<string>> RunGroupChat(IKernel kernel, string baseDesc, string category)
    {
        var agents = new List<(string Persona, string Prompt)>
        {
            ("Minimalist Stylist", "Rewrite the following clothing description in a clean, modern, concise style:"),
            ("Poetic Designer", "Rewrite the following clothing description with expressive, metaphor-rich language:"),
            ("Marketing Copywriter", "Rewrite the following clothing description to be persuasive and benefit-driven:")
        };

        var results = new List<string>();
        foreach (var (persona, prompt) in agents)
        {
            var input = $"{prompt}\n\"{baseDesc}\" (Category: {category})";
            var result = await kernel.InvokePromptAsync(input);
            results.Add($"[{persona}]: {result.GetValue<string>()}");
        }
        return results;
    }
}